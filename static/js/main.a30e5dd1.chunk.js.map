{"version":3,"sources":["Thermometer.jsx","RadialSlider.jsx","Widget.jsx","App.js","reportWebVitals.js","index.js"],"names":["Thermometer","props","handleChange","bind","handleClickAway","state","error","e","this","onTemperatureChange","target","value","currTemperature","setState","console","log","ClickAwayListener","onClickAway","FormControl","Input","type","id","onChange","endAdornment","InputAdornment","position","aria-describedby","inputProps","FormHelperText","React","Component","RadialSlider","event","targetTemperature","Slider","valueLabelDisplay","min","max","Widget","handleCurrTempChange","handleTargetTempChange","mode","getMode","Grid","container","direction","spacing","justify","alignItems","style","marginTop","item","xs","width","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a30e5dd1.chunk.js","sourcesContent":["import React from \"react\";\nimport Input from \"@material-ui/core/Input\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\n\nclass Thermometer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClickAway = this.handleClickAway.bind(this);\n    this.state = { error: false };\n  }\n\n  handleChange(e) {\n    this.props.onTemperatureChange(e.target.value);\n  }\n\n  handleClickAway(e) {\n    if (this.props.currTemperature >= 32 && this.props.currTemperature <= 100) {\n      this.setState({ error: false });\n    } else {\n      console.log(this.props.currTemperature);\n      this.setState({ error: true });\n    }\n  }\n\n  render() {\n    const currTemperature = this.props.currTemperature;\n    const error = this.state.error;\n    console.log(error)\n    return (\n      <ClickAwayListener onClickAway={this.handleClickAway}>\n        <FormControl>\n          <Input\n            error={error}\n            type=\"number\"\n            id=\"current-temperature-input\"\n            value={currTemperature}\n            onChange={this.handleChange}\n            endAdornment={<InputAdornment position=\"end\">°F</InputAdornment>}\n            aria-describedby=\"current-temperature-input-helper-text\"\n            inputProps={{\n              \"aria-label\": \"currTemp\",\n            }}\n          />\n          <FormHelperText id=\"current-temperature-input-helper-text\">\n            {error ? 'Only between 32°F to 100°F' : 'Current Temperature'}\n          </FormHelperText>\n        </FormControl>\n      </ClickAwayListener>\n    );\n  }\n}\n\nexport default Thermometer;\n","import React from \"react\";\nimport Slider from \"@material-ui/core/Slider\";\n\nclass RadialSlider extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event, value) {\n    this.props.onTemperatureChange(value)\n  }\n\n  render() {\n    const targetTemperature = this.props.targetTemperature;\n\n    return (\n      <div>\n        <Slider\n          value={targetTemperature}\n          onChange={this.handleChange}\n          valueLabelDisplay=\"on\"\n          min={50}\n          max={80}\n        />\n      </div>\n    );\n  }\n}\n\nexport default RadialSlider;\n","import React from \"react\";\nimport Thermometer from \"./Thermometer\";\nimport RadialSlider from \"./RadialSlider\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst dT = 2;\nconst dTCool = 1.5;\nconst dTHeat = 1.5;\n\nfunction getMode(currTemperature, targetTemperature) {\n  if (currTemperature < targetTemperature - dT - dTHeat) {\n    return \"heating\";\n  } else if (currTemperature > targetTemperature + dT + dTCool) {\n    return \"cooling\";\n  } else {\n    return \"off\";\n  }\n}\n\nclass Widget extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleCurrTempChange = this.handleCurrTempChange.bind(this);\n    this.handleTargetTempChange = this.handleTargetTempChange.bind(this);\n    this.state = { currTemperature: 72, targetTemperature: 72, mode: \"off\" };\n  }\n\n  handleCurrTempChange(currTemperature) {\n    this.setState({ currTemperature });\n  }\n\n  handleTargetTempChange(targetTemperature) {\n      this.setState({ targetTemperature });\n  }\n\n  render() {\n    const currTemperature = this.state.currTemperature;\n    const targetTemperature = this.state.targetTemperature;\n    const mode = getMode(currTemperature, targetTemperature);\n\n    return (\n      <div>\n        <Grid\n          container\n          direction=\"column\"\n          spacing={3}\n          justify=\"center\"\n          alignItems=\"center\"\n          style={{ marginTop: \"2rem\" }}\n        >\n          <Grid item xs={4}>\n            <p>Target temperature: {targetTemperature}°F</p>\n            <p>Current temperature: {currTemperature}°F</p>\n            <p>Mode: {mode}</p>\n          </Grid>\n          <Grid item xs={4} style={{ width: \"100%\" }}>\n            <RadialSlider\n              targetTemperature={targetTemperature}\n              onTemperatureChange={this.handleTargetTempChange}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <Thermometer\n              currTemperature={currTemperature}\n              onTemperatureChange={this.handleCurrTempChange}\n            />\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default Widget;\n","import './App.css';\nimport Widget from './Widget.jsx'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Widget />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}