{"version":3,"sources":["Thermometer.jsx","View/RadialSliderView.jsx","Model/RadialSlider.Model.js","View/WidgetView.jsx","App.js","reportWebVitals.js","index.js"],"names":["Thermometer","props","handleChange","bind","handleClickAway","state","error","e","this","onTemperatureChange","target","value","currTemperature","setState","console","log","ClickAwayListener","onClickAway","FormControl","Input","type","id","onChange","endAdornment","InputAdornment","position","aria-describedby","inputProps","FormHelperText","React","Component","degToRad","deg","Math","PI","RadialSliderView","handleMouseMove","handleMouseDown","handleMouseUp","componentDidMount","componentWillUnmount","updateWindowDimensions","windowWidth","window","innerWidth","xknob","cos","yknob","sin","xcord","ycord","isMouseDown","addEventListener","removeEventListener","pageX","pageY","distFromX","distFromY","targetTemperature","coords","rad","atan2","adjRad","floor","calculateTargetTemp","knobCoords","mouseCoords","getKnobCoords","mode","temp","currTemp","targetTemp","calculateMode","colour","getColour","width","height","overflow","onMouseMove","onMouseUp","fill","cx","cy","r","fillOpacity","onMouseDown","style","cursor","x","y","text-anchor","fontSize","WidgetView","handleCurrTempChange","handleTargetTempChange","Grid","container","direction","spacing","justify","alignItems","item","xs","marginTop","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mSAuDeA,E,kDA/Cb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,gBAAkB,EAAKA,gBAAgBD,KAArB,gBACvB,EAAKE,MAAQ,CAAEC,OAAO,GAJL,E,gDAOnB,SAAaC,GACXC,KAAKP,MAAMQ,oBAAoBF,EAAEG,OAAOC,S,6BAG1C,SAAgBJ,GACVC,KAAKP,MAAMW,iBAAmB,IAAMJ,KAAKP,MAAMW,iBAAmB,IACpEJ,KAAKK,SAAS,CAAEP,OAAO,KAEvBQ,QAAQC,IAAIP,KAAKP,MAAMW,iBACvBJ,KAAKK,SAAS,CAAEP,OAAO,O,oBAI3B,WACE,IAAMM,EAAkBJ,KAAKP,MAAMW,gBAC7BN,EAAQE,KAAKH,MAAMC,MACzB,OACE,cAACU,EAAA,EAAD,CAAmBC,YAAaT,KAAKJ,gBAArC,SACE,eAACc,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACEb,MAAOA,EACPc,KAAK,SACLC,GAAG,4BACHV,MAAOC,EACPU,SAAUd,KAAKN,aACfqB,aAAc,cAACC,EAAA,EAAD,CAAgBC,SAAS,MAAzB,mBACdC,mBAAiB,wCACjBC,WAAY,CACV,aAAc,cAGlB,cAACC,EAAA,EAAD,CAAgBP,GAAG,wCAAnB,SACGf,EAAQ,mCAA+B,iC,GAxC1BuB,IAAMC,WCJhC,SAASC,EAASC,GAIhB,OAAQA,EAAMC,KAAKC,GAAM,I,IAoIZC,E,kDAzGb,WAAYlC,GAAQ,IAAD,8BACjB,cAAMA,IACDmC,gBAAkB,EAAKA,gBAAgBjC,KAArB,gBACvB,EAAKkC,gBAAkB,EAAKA,gBAAgBlC,KAArB,gBACvB,EAAKmC,cAAgB,EAAKA,cAAcnC,KAAnB,gBACrB,EAAKoC,kBAAoB,EAAKA,kBAAkBpC,KAAvB,gBACzB,EAAKqC,qBAAuB,EAAKA,qBAAqBrC,KAA1B,gBAC5B,EAAKsC,uBAAyB,EAAKA,uBAAuBtC,KAA5B,gBAC9B,EAAKE,MAAQ,CACXqC,YAAaC,OAAOC,WACpBC,MAAO,IAAgC,IAA1BZ,KAAKa,IAAIf,EAAS,MAC/BgB,MAAO,IAAgC,IAA1Bd,KAAKe,IAAIjB,EAAS,MAC/BkB,MAAO,EACPC,MAAO,EACPC,aAAa,GAdE,E,qDAkBnB,WACE3C,KAAKiC,yBACLE,OAAOS,iBAAiB,SAAU5C,KAAKiC,0B,kCAGzC,WACEE,OAAOU,oBAAoB,SAAU7C,KAAKiC,0B,oCAG5C,WAIEjC,KAAKK,SAAS,CACZ6B,YAAaC,OAAOC,e,6BAIxB,SAAgBrC,GAEd,GADAC,KAAKK,SAAS,CAAEoC,MAAO1C,EAAE+C,MAAOJ,MAAO3C,EAAEgD,QACrC/C,KAAKH,MAAM8C,YAAa,CAC1B,IAEMK,EAFUhD,KAAKH,MAAMqC,YAAc,EAEblC,KAAKH,MAAM4C,MACjCQ,EAFU,IAEYjD,KAAKH,MAAM6C,MACjCQ,EC5EL,SAA6BC,GAIlC,IAAMH,EAAYG,EAAO,GACnBF,EAAYE,EAAO,GACnBC,EAAM3B,KAAK4B,MAAMJ,EAAWD,GAC9BM,EAAS,EAWb,OATEA,EADEF,GAAO,KAAOA,GAAO3B,KAAKC,GAAK,GAExB0B,GAAO,GAAKA,EAAM3B,KAAKC,GAAK,GAE5B0B,GAAO3B,KAAKC,GAAK,GAAK0B,GAAO3B,KAAKC,GAHlC0B,EAAM3B,KAAKC,GAAK,EAMhB0B,EAAM,IAAM3B,KAAKC,GAEFD,KAAK8B,MAAMD,GAAU7B,KAAKC,GAAK,IAAM,ID2DjC8B,CAAoB,CAACR,EAAWC,IAC1DjD,KAAKP,MAAMQ,oBAAoBiD,GAC/B,IAAMO,EArEZ,SAAuBC,GAIrB,IAAMN,EAAM3B,KAAK4B,MAAMK,EAAY,GAAIA,EAAY,IACnD,MAAO,CAAC,IAAsB,IAAhBjC,KAAKa,IAAIc,GAAY,IAAsB,IAAhB3B,KAAKe,IAAIY,IAgE3BO,CAAc,CAACX,EAAWC,IAC7CjD,KAAKK,SAAS,CAAEgC,MAAOoB,EAAW,GAAIlB,MAAOkB,EAAW,Q,6BAI5D,SAAgB1D,GACdC,KAAKK,SAAS,CAAEsC,aAAa,M,2BAG/B,SAAc5C,GACZC,KAAKK,SAAS,CAAEsC,aAAa,M,oBAG/B,WACE,IAAMN,EAAQrC,KAAKH,MAAMwC,MACnBE,EAAQvC,KAAKH,MAAM0C,MAFlB,EAGwCvC,KAAKP,MAA5CW,EAHD,EAGCA,gBAAiB8C,EAHlB,EAGkBA,kBACnBU,EC1EH,SAAuBC,GAI7B,IAAMC,EAAWD,EAAK,GAChBE,EAAaF,EAAK,GAIxB,OAAIC,EAAWC,EAHJ,EAEI,IAEL,UACED,EAAWC,EALZ,EACI,IAKL,UAEA,MD4DMC,CAAc,CAAC5D,EAAiB8C,IACvCe,EA/EV,SAAmBL,GAIjB,GAAa,QAATA,EACF,MAAO,UACF,GAAa,YAATA,EACT,MAAO,UACF,GAAa,YAATA,EACT,MAAO,UAEP,KAAM,eAoESM,CAAUN,GAEzB,OACE,gCACE,sBAAKO,MAAM,QAAQC,OAAO,QAAQC,SAAS,UAA3C,UACE,wBACEC,YAAatE,KAAK4B,gBAClB2C,UAAWvE,KAAK8B,cAChB0C,KAAMP,EACNQ,GAAG,MACHC,GAAG,MACHC,EAAE,QAEJ,wBACEH,KAAK,UACLC,GAAIpC,EACJqC,GAAInC,EACJoC,EAAE,KACFC,YAAY,QAEd,wBACEJ,KAAK,UACLC,GAAIpC,EACJqC,GAAInC,EACJoC,EAAE,KACFE,YAAa7E,KAAK6B,gBAClB0C,UAAWvE,KAAK8B,cAChBgD,MAAO,CAAEC,OAAQ,aAEnB,uBAAMC,EAAE,MAAMC,EAAE,MAAMC,cAAY,SAASC,SAAS,OAApD,UACGjC,EADH,WAGA,uBAAM8B,EAAE,MAAMC,EAAE,MAAMC,cAAY,SAASC,SAAS,OAApD,sBACY/E,EADZ,cAIF,uCAAUwD,Y,GApGavC,IAAMC,WEoBtB8D,E,kDA/Cb,WAAY3F,GAAQ,IAAD,8BACjB,cAAMA,IACD4F,qBAAuB,EAAKA,qBAAqB1F,KAA1B,gBAC5B,EAAK2F,uBAAyB,EAAKA,uBAAuB3F,KAA5B,gBAC9B,EAAKE,MAAQ,CAAEO,gBAAiB,GAAI8C,kBAAmB,IAJtC,E,wDAOnB,SAAqB9C,GACnBJ,KAAKK,SAAS,CAAED,sB,oCAGlB,SAAuB8C,GACrBlD,KAAKK,SAAS,CAAE6C,wB,oBAGlB,WACE,IAAM9C,EAAkBJ,KAAKH,MAAMO,gBAC7B8C,EAAoBlD,KAAKH,MAAMqD,kBAErC,OACE,8BACE,eAACqC,EAAA,EAAD,CACEC,WAAS,EACTC,UAAU,SACVC,QAAS,EACTC,QAAQ,SACRC,WAAW,SALb,UAOE,cAACL,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,EAAGhB,MAAO,CAAEX,MAAO,OAAQ4B,UAAW,QAArD,SACE,cAAC,EAAD,CACE9F,oBAAqBD,KAAKsF,uBAC1BpC,kBAAmBA,EACnB9C,gBAAiBA,MAGrB,cAACmF,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAf,SACE,cAAC,EAAD,CACE1F,gBAAiBA,EACjBH,oBAAqBD,KAAKqF,kC,GAvCfhE,IAAMC,WCMhB0E,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2523cc9a.chunk.js","sourcesContent":["import React from \"react\";\nimport Input from \"@material-ui/core/Input\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\n\nclass Thermometer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClickAway = this.handleClickAway.bind(this);\n    this.state = { error: false };\n  }\n\n  handleChange(e) {\n    this.props.onTemperatureChange(e.target.value);\n  }\n\n  handleClickAway(e) {\n    if (this.props.currTemperature >= 32 && this.props.currTemperature <= 100) {\n      this.setState({ error: false });\n    } else {\n      console.log(this.props.currTemperature);\n      this.setState({ error: true });\n    }\n  }\n\n  render() {\n    const currTemperature = this.props.currTemperature;\n    const error = this.state.error;\n    return (\n      <ClickAwayListener onClickAway={this.handleClickAway}>\n        <FormControl>\n          <Input\n            error={error}\n            type=\"number\"\n            id=\"current-temperature-input\"\n            value={currTemperature}\n            onChange={this.handleChange}\n            endAdornment={<InputAdornment position=\"end\">°F</InputAdornment>}\n            aria-describedby=\"current-temperature-input-helper-text\"\n            inputProps={{\n              \"aria-label\": \"currTemp\",\n            }}\n          />\n          <FormHelperText id=\"current-temperature-input-helper-text\">\n            {error ? 'Only between 32°F to 100°F' : 'Current Temperature'}\n          </FormHelperText>\n        </FormControl>\n      </ClickAwayListener>\n    );\n  }\n}\n\nexport default Thermometer;\n","import React from \"react\";\nimport { calculateMode, calculateTargetTemp } from '../Model/RadialSlider.Model'\n\nfunction degToRad(deg) {\n  /**\n   * Helper function to convert degree to radians\n   */\n  return (deg * Math.PI) / 180;\n}\n\nfunction getKnobCoords(mouseCoords) {\n  /**\n   * Calculates where the knob should be based on mouse coordinates\n   */\n  const rad = Math.atan2(mouseCoords[1], mouseCoords[0]);\n  return [200 - Math.cos(rad) * 200, 200 - Math.sin(rad) * 200];\n}\n\nfunction getColour(mode) {\n  /**\n   * Determines the colour of radial slider depending on thermostat mode\n   */\n  if (mode === \"off\") {\n    return \"#E5E7EB\";\n  } else if (mode === \"cooling\") {\n    return \"#BFDBFE\";\n  } else if (mode === \"heating\") {\n    return \"#FECACA\";\n  } else {\n    throw \"Unknown mode\"\n  }\n}\n\nclass RadialSliderView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleMouseMove = this.handleMouseMove.bind(this);\n    this.handleMouseDown = this.handleMouseDown.bind(this);\n    this.handleMouseUp = this.handleMouseUp.bind(this);\n    this.componentDidMount = this.componentDidMount.bind(this);\n    this.componentWillUnmount = this.componentWillUnmount.bind(this);\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n    this.state = {\n      windowWidth: window.innerWidth,\n      xknob: 200 - Math.cos(degToRad(174)) * 200,\n      yknob: 200 - Math.sin(degToRad(174)) * 200,\n      xcord: 0,\n      ycord: 0,\n      isMouseDown: false,\n    };\n  }\n\n  componentDidMount() {\n    this.updateWindowDimensions();\n    window.addEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions() {\n    /**\n     * Recalculate coordinates of horizontal centre of circle when window is resized\n     */\n    this.setState({\n      windowWidth: window.innerWidth,\n    });\n  }\n\n  handleMouseMove(e) {\n    this.setState({ xcord: e.pageX, ycord: e.pageY });\n    if (this.state.isMouseDown) {\n      const centreX = this.state.windowWidth / 2; // circle is in horizontal centre of page\n      const centreY = 250; // 50px margin and 200px radius\n      const distFromX = centreX - this.state.xcord;\n      const distFromY = centreY - this.state.ycord;\n      const targetTemperature = calculateTargetTemp([distFromX, distFromY]);\n      this.props.onTemperatureChange(targetTemperature);\n      const knobCoords = getKnobCoords([distFromX, distFromY]);\n      this.setState({ xknob: knobCoords[0], yknob: knobCoords[1] });\n    }\n  }\n\n  handleMouseDown(e) {\n    this.setState({ isMouseDown: true });\n  }\n\n  handleMouseUp(e) {\n    this.setState({ isMouseDown: false });\n  }\n\n  render() {\n    const xknob = this.state.xknob;\n    const yknob = this.state.yknob;\n    const { currTemperature, targetTemperature } = this.props;\n    const mode = calculateMode([currTemperature, targetTemperature]);\n    const colour = getColour(mode)\n\n    return (\n      <div>\n        <svg width=\"400px\" height=\"400px\" overflow=\"visible\">\n          <circle\n            onMouseMove={this.handleMouseMove}\n            onMouseUp={this.handleMouseUp}\n            fill={colour}\n            cx=\"200\"\n            cy=\"200\"\n            r=\"200\"\n          />\n          <circle\n            fill=\"#9CA3AF\"\n            cx={xknob}\n            cy={yknob}\n            r=\"16\"\n            fillOpacity=\"0.2\"\n          />\n          <circle\n            fill=\"#F9FAFB\"\n            cx={xknob}\n            cy={yknob}\n            r=\"10\"\n            onMouseDown={this.handleMouseDown}\n            onMouseUp={this.handleMouseUp}\n            style={{ cursor: \"pointer\" }}\n          />\n          <text x=\"200\" y=\"200\" text-anchor=\"middle\" fontSize=\"3rem\">\n            {targetTemperature}°F\n          </text>\n          <text x=\"200\" y=\"250\" text-anchor=\"middle\" fontSize=\"1rem\">\n            Current: {currTemperature}°F\n          </text>\n        </svg>\n        <p>Mode: {mode}</p>\n      </div>\n    );\n  }\n}\n\nexport default RadialSliderView;\n","// TODO: Clean up conditional statement\nexport function calculateTargetTemp(coords) {\n  /**\n   * Determines the target temperature depending on the mouse coordinates\n   */\n  const distFromX = coords[0];\n  const distFromY = coords[1];\n  const rad = Math.atan2(distFromY, distFromX);\n  let adjRad = 0;\n  if (rad <= 180 && rad > -Math.PI / 2) {\n    adjRad = rad + Math.PI / 2;\n  } else if (rad >= 0 && rad < Math.PI / 2) {\n    adjRad = rad + Math.PI / 2;\n  } else if (rad >= Math.PI / 2 && rad <= Math.PI) {\n    adjRad = rad + Math.PI / 2;\n  } else {\n    adjRad = rad + 2.5 * Math.PI;\n  }\n  const targetTemperature = Math.floor(adjRad / (Math.PI / 15) + 50); // mathpi / 15 = 1 fahrenheit\n  return targetTemperature;\n}\n\nexport function calculateMode(temp) {\n  /**\n   * Determines the mode of the thermostat depending on the current and target temperature\n   */\n\tconst currTemp = temp[0];\n\tconst targetTemp = temp[1];\n\tconst dT = 2;\n\tconst dTCool = 1.5;\n\tconst dTHeat = 1.5;\n\tif (currTemp < targetTemp - dT - dTHeat) {\n    return \"heating\";\n  } else if (currTemp > targetTemp + dT + dTCool) {\n    return \"cooling\";\n  } else {\n    return \"off\";\n  }\n}\n","import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Thermometer from '../Thermometer';\nimport RadialSliderView from './RadialSliderView';\n\nclass WidgetView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleCurrTempChange = this.handleCurrTempChange.bind(this);\n    this.handleTargetTempChange = this.handleTargetTempChange.bind(this);\n    this.state = { currTemperature: 72, targetTemperature: 72 };\n  }\n\n  handleCurrTempChange(currTemperature) {\n    this.setState({ currTemperature });\n  }\n\n  handleTargetTempChange(targetTemperature) {\n    this.setState({ targetTemperature });\n  }\n\n  render() {\n    const currTemperature = this.state.currTemperature;\n    const targetTemperature = this.state.targetTemperature;\n\n    return (\n      <div>\n        <Grid\n          container\n          direction=\"column\"\n          spacing={3}\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <Grid item xs={4} style={{ width: \"100%\", marginTop: \"50px\" }}>\n            <RadialSliderView\n              onTemperatureChange={this.handleTargetTempChange}\n              targetTemperature={targetTemperature}\n              currTemperature={currTemperature}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <Thermometer\n              currTemperature={currTemperature}\n              onTemperatureChange={this.handleCurrTempChange}\n            />\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default WidgetView;\n","import './App.css';\nimport WidgetView from \"./View/WidgetView.jsx\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <WidgetView />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}