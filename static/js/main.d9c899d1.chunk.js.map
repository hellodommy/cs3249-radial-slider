{"version":3,"sources":["ThermostatMachine.jsx","Thermometer.jsx","View/RadialSliderView.jsx","View/MainPanelView.jsx","App.js","reportWebVitals.js","index.js"],"names":["updateCurrentTemp","assign","currTemp","context","event","updateTargetTemp","targetTemp","thermostatMachine","Machine","id","initial","dT","dTCool","dTHeat","states","off","on","CURR_TEMP_CHANGE","target","actions","TARGET_TEMP_CHANGE","cooling","heating","tempCheck","cond","guards","isHot","isCold","isNormal","Thermometer","props","handleChange","bind","handleClickAway","state","error","e","this","onTemperatureChange","value","currTemperature","setState","ClickAwayListener","onClickAway","FormControl","Input","type","onChange","endAdornment","InputAdornment","position","aria-describedby","inputProps","FormHelperText","React","Component","getAngle","windowWidth","mouseX","mouseY","distFromX","distFromY","Math","atan2","PI","getKnobCoords","deg","rad","degToRad","cos","sin","multiple","RadialSliderView","service","interpret","onTransition","current","handleMouseMove","handleMouseDown","handleScroll","handleMouseUp","handleCurrTempChange","updateTarget","handleRotationDrag","componentDidMount","componentWillUnmount","updateWindowDimensions","angle","window","innerWidth","isMouseDown","initialState","start","addEventListener","stop","removeEventListener","send","detail","newTargetTemp","normalisedDeg","normaliseDeg","targetTemperature","floor","calculateTargetTemp","CustomEvent","dispatchEvent","preventDefault","deltaY","getScrollDeg","rotationDrag","pageX","pageY","colour","mode","Error","getColour","xknob","yknob","width","height","overflow","onWheel","onMouseMove","onMouseUp","fill","cx","cy","r","fillOpacity","onMouseDown","style","cursor","x","y","text-anchor","fontSize","MainPanelView","marginTop","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d9c899d1.chunk.js","sourcesContent":["// Available variables:\n// - Machine\n// - interpret\n// - assign\n// - send\n// - sendParent\n// - spawn\n// - raise\n// - actions\n// - XState (all XState exports)\nimport { Machine, assign } from \"xstate\";\n\nconst updateCurrentTemp = assign({\n  currTemp: (context, event) => event.currTemp\n});\n\nconst updateTargetTemp = assign({\n  targetTemp: (context, event) => event.targetTemp,\n});\n\nconst thermostatMachine = Machine(\n  {\n    id: \"thermostat\",\n    initial: \"off\",\n    context: {\n      targetTemp: 72,\n      currTemp: 72,\n      dT: 2,\n      dTCool: 1.5,\n      dTHeat: 1.5,\n    },\n    states: {\n      off: {\n        on: {\n          CURR_TEMP_CHANGE: {\n            target: \"tempCheck\",\n            actions: [updateCurrentTemp],\n          },\n          TARGET_TEMP_CHANGE: {\n            target: \"tempCheck\",\n            actions: [updateTargetTemp],\n          },\n        },\n      },\n      cooling: {\n        on: {\n          CURR_TEMP_CHANGE: {\n            target: \"tempCheck\",\n            actions: [updateCurrentTemp],\n          },\n          TARGET_TEMP_CHANGE: {\n            target: \"tempCheck\",\n            actions: [updateTargetTemp],\n          },\n        },\n      },\n      heating: {\n        on: {\n          CURR_TEMP_CHANGE: {\n            target: \"tempCheck\",\n            actions: [updateCurrentTemp],\n          },\n          TARGET_TEMP_CHANGE: {\n            target: \"tempCheck\",\n            actions: [updateTargetTemp],\n          },\n        },\n      },\n      // transient state\n      tempCheck: {\n        on: {\n          \"\": [\n            { target: \"off\", cond: \"isNormal\" },\n            { target: \"cooling\", cond: \"isHot\" },\n            { target: \"heating\", cond: \"isCold\" },\n          ],\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      isHot: (context, event) => {\n        return (\n          context.currTemp >= context.targetTemp + context.dT + context.dTCool\n        );\n      },\n      isCold: (context, event) => {\n        return (\n          context.currTemp <= context.targetTemp - context.dT - context.dTHeat\n        );\n      },\n      isNormal: (context, event) => {\n        return (\n          context.currTemp < context.targetTemp + context.dT + context.dTCool &&\n          context.currTemp > context.targetTemp - context.dT - context.dTHeat\n        );\n      },\n    },\n  }\n);\n\nexport default thermostatMachine;","import React from \"react\";\nimport Input from \"@material-ui/core/Input\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\n\nclass Thermometer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClickAway = this.handleClickAway.bind(this);\n    this.state = { error: false };\n  }\n\n  handleChange(e) {\n    this.props.onTemperatureChange(e.target.value);\n  }\n\n  handleClickAway(e) {\n    if (this.props.currTemperature >= 32 && this.props.currTemperature <= 100) {\n      this.setState({ error: false });\n    } else {\n      this.setState({ error: true });\n    }\n  }\n\n  render() {\n    const currTemperature = this.props.currTemperature;\n    const error = this.state.error;\n    return (\n      <ClickAwayListener onClickAway={this.handleClickAway}>\n        <FormControl>\n          <Input\n            error={error}\n            type=\"number\"\n            id=\"current-temperature-input\"\n            value={currTemperature}\n            onChange={this.handleChange}\n            endAdornment={<InputAdornment position=\"end\">°F</InputAdornment>}\n            aria-describedby=\"current-temperature-input-helper-text\"\n            inputProps={{\n              \"aria-label\": \"currTemp\",\n            }}\n          />\n          <FormHelperText id=\"current-temperature-input-helper-text\">\n            {error ? 'Only between 32°F to 100°F' : 'Current Temperature'}\n          </FormHelperText>\n        </FormControl>\n      </ClickAwayListener>\n    );\n  }\n}\n\nexport default Thermometer;\n","import React from \"react\";\nimport { Machine, interpret } from \"xstate\";\n\nimport thermostatMachine from \"../ThermostatMachine\";\nimport Thermometer from \"../Thermometer\";\n\n/**\n * Radial Slider View-Model Component\n */\nfunction getAngle(windowWidth, mouseX, mouseY) {\n  /**\n   * Get angle of rotation\n   */\n  const centreX = windowWidth / 2; // circle is in horizontal centre of page\n  const centreY = 250; // 50px margin and 200px radius\n  const distFromX = centreX - mouseX;\n  const distFromY = centreY - mouseY;\n  const deg = radToDeg(Math.atan2(distFromY, distFromX));\n  return deg;\n}\n\nfunction getKnobCoords(deg) {\n  /**\n   * Calculates where the knob should be based on angle\n   */\n  const rad = degToRad(deg);\n  return [200 - Math.cos(rad) * 200, 200 - Math.sin(rad) * 200];\n}\n\nfunction getColour(mode) {\n  /**\n   * Determines colour of radial slider depending on mode\n   */\n  switch (mode) {\n    case \"off\":\n      return \"#E5E7EB\";\n    case \"cooling\":\n      return \"#BFDBFE\";\n    case \"heating\":\n      return \"#FECACA\";\n    default:\n      throw new Error(\"Unkown mode\");\n  }\n}\n\nconst multiple = 270 / 31; // angle range of each fahrenheit\n\nfunction getScrollDeg(angle, deltaY) {\n  /**\n   * Determines the angle achieved from scrolling on the slider\n   */\n  let deg = angle + deltaY * 0.05;\n  if (deg >= 180) {\n    deg = deg - 360;\n  } else if (deg <= -180) {\n    deg = 180 + deltaY * 0.05;\n  }\n  return deg;\n}\n\nfunction calculateTargetTemp(deg) {\n  /**\n   * Determines the target temperature depending on the angle\n   */\n  const normalisedDeg = normaliseDeg(deg);\n  const targetTemperature = (Math.floor(normalisedDeg / multiple * 2) + 100) / 2;\n  if (targetTemperature === 80.5) {\n    return 80;\n  }\n  return targetTemperature;\n}\n\nfunction normaliseDeg(deg) {\n  /**\n   * Helper function to adjust the angle to relative axis starting at -45deg\n   */\n  if (deg >= -45 && deg <= 180) {\n    return deg + 45;\n  } else {\n    return deg + 405;\n  }\n}\n\nfunction degToRad(deg) {\n  /**\n   * Helper function to convert degree to radians\n   */\n  return (deg * Math.PI) / 180;\n}\n\nfunction radToDeg(rad) {\n  /**\n   * Helper function to convert radians to degree\n   */\n  return (rad * 180) / Math.PI;\n}\n\nclass RadialSliderView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleMouseMove = this.handleMouseMove.bind(this);\n    this.handleMouseDown = this.handleMouseDown.bind(this);\n    this.handleScroll = this.handleScroll.bind(this);\n    this.handleMouseUp = this.handleMouseUp.bind(this);\n    this.handleCurrTempChange = this.handleCurrTempChange.bind(this);\n    this.updateTarget = this.updateTarget.bind(this);\n    this.handleRotationDrag = this.handleRotationDrag.bind(this);\n    this.componentDidMount = this.componentDidMount.bind(this);\n    this.componentWillUnmount = this.componentWillUnmount.bind(this);\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n    this.state = {\n      angle: 12 * multiple + 45,\n      windowWidth: window.innerWidth,\n      isMouseDown: false,\n      current: thermostatMachine.initialState,\n    };\n  }\n\n  service = interpret(thermostatMachine).onTransition((current) =>\n    this.setState({ current })\n  );\n\n  componentDidMount() {\n    this.service.start();\n    this.updateWindowDimensions();\n    window.addEventListener(\"updateTarget\", this.updateTarget);\n    window.addEventListener(\"rotationDrag\", this.handleRotationDrag);\n    window.addEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  componentWillUnmount() {\n    this.service.stop();\n    window.removeEventListener(\"updateTarget\", this.updateTarget);\n    window.removeEventListener(\"rotationDrag\", this.handleRotationDrag);\n    window.removeEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions() {\n    /**\n     * Recalculate coordinates of horizontal centre of circle when window is resized\n     */\n    this.setState({\n      windowWidth: window.innerWidth,\n    });\n  }\n\n  updateTarget(e) {\n    /**\n     * Update target temperature in state machine\n     */\n    this.service.send({\n      type: \"TARGET_TEMP_CHANGE\",\n      targetTemp: e.detail.targetTemp,\n    });\n  }\n\n  handleCurrTempChange(currTemperature) {\n    /**\n     * Update current temperature in state machine\n     */\n    this.service.send({\n      type: \"CURR_TEMP_CHANGE\",\n      currTemp: currTemperature,\n    });\n  }\n\n  handleRotationDrag(e) {\n    const deg = e.detail.deg;\n    if ((deg >= -45) || (deg < -135 && deg > -180)) {\n      // if angle is in valid zone\n      this.setState({ angle: deg });\n\n      const newTargetTemp = calculateTargetTemp(deg);\n      if (newTargetTemp !== this.state.current.context.targetTemp) {\n        var updateTarget = new CustomEvent(\"updateTarget\", {\n          detail: {\n            targetTemp: newTargetTemp,\n          },\n        });\n        window.dispatchEvent(updateTarget);\n      }\n    }\n  }\n\n  handleScroll(e) {\n    this.setState({ isMouseDown: false })\n    e.preventDefault();\n    const deg = getScrollDeg(this.state.angle, e.deltaY);\n    var rotationDrag = new CustomEvent(\"rotationDrag\", {\n      detail: {\n        deg: deg,\n      },\n    });\n    window.dispatchEvent(rotationDrag);\n  }\n\n  handleMouseMove(e) {\n    if (this.state.isMouseDown) {\n      const deg = getAngle(this.state.windowWidth, e.pageX, e.pageY);\n      var rotationDrag = new CustomEvent(\"rotationDrag\", {\n        detail: {\n          deg: deg,\n        },\n      });\n      window.dispatchEvent(rotationDrag);\n    }\n  }\n\n  handleMouseDown(e) {\n    this.setState({ isMouseDown: true });\n  }\n\n  handleMouseUp(e) {\n    this.setState({ isMouseDown: false });\n  }\n\n  render() {\n    /**\n     * Values taken from XState Context\n     */\n    const currTemperature = this.state.current.context.currTemp;\n    const targetTemperature = this.state.current.context.targetTemp;\n    const mode = this.state.current.value;\n    const colour = getColour(mode);\n\n    /**\n     * Values taken from React State\n     */\n    const xknob = getKnobCoords(this.state.angle)[0];\n    const yknob = getKnobCoords(this.state.angle)[1];\n\n    /**\n     * Radial Slider View Component\n     */\n    return (\n      <div>\n        <svg width=\"400px\" height=\"400px\" overflow=\"visible\">\n          <circle\n            id=\"slider-body\"\n            onWheel={this.handleScroll}\n            onMouseMove={this.handleMouseMove}\n            onMouseUp={this.handleMouseUp}\n            fill={colour}\n            cx=\"200\"\n            cy=\"200\"\n            r=\"200\"\n          />\n          <circle\n            id=\"knob-shadow\"\n            fill=\"#9CA3AF\"\n            cx={xknob}\n            cy={yknob}\n            r=\"16\"\n            fillOpacity=\"0.2\"\n          />\n          <circle\n            id=\"knob\"\n            fill=\"#F9FAFB\"\n            cx={xknob}\n            cy={yknob}\n            r=\"10\"\n            onMouseDown={this.handleMouseDown}\n            onMouseUp={this.handleMouseUp}\n            style={{ cursor: \"pointer\" }}\n          />\n          <text x=\"200\" y=\"200\" text-anchor=\"middle\" fontSize=\"3rem\">\n            {targetTemperature}°F\n          </text>\n          <text x=\"200\" y=\"250\" text-anchor=\"middle\" fontSize=\"1rem\">\n            Current: {currTemperature}°F\n          </text>\n        </svg>\n\n        {/* External UI (for testing) */}\n        <p>\n          <Thermometer\n            currTemperature={currTemperature}\n            onTemperatureChange={this.handleCurrTempChange}\n          />\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default RadialSliderView;\n","import React from \"react\";\nimport RadialSliderView from './RadialSliderView';\n\nclass MainPanelView extends React.Component {\n\n  render() {\n    return (\n      <div style={{marginTop: 50 }}>\n        <RadialSliderView />\n      </div>\n    );\n  }\n}\n\nexport default MainPanelView;\n","import './App.css';\nimport MainPanelView from \"./View/MainPanelView.jsx\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainPanelView />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}