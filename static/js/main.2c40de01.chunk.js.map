{"version":3,"sources":["ThermostatMachine.jsx","Thermometer.jsx","View/RadialSliderView.jsx","Model/RadialSlider.Model.js","View/WidgetView.jsx","App.js","reportWebVitals.js","index.js"],"names":["updateCurrentTemp","assign","currTemp","context","event","updateTargetTemp","targetTemp","colourGrey","colour","colourBlue","colourRed","thermostatMachine","Machine","id","initial","dT","dTCool","dTHeat","states","off","on","CURR_TEMP_CHANGE","target","actions","TARGET_TEMP_CHANGE","cooling","heating","tempCheck","cond","guards","isHot","isCold","isNormal","Thermometer","props","handleChange","bind","handleClickAway","state","error","e","this","onTemperatureChange","value","currTemperature","setState","console","log","ClickAwayListener","onClickAway","FormControl","Input","type","onChange","endAdornment","InputAdornment","position","aria-describedby","inputProps","FormHelperText","React","Component","degToRad","deg","Math","PI","xknobStart","cos","yknobStart","sin","RadialSliderView","service","interpret","onTransition","current","handleMouseMove","handleMouseDown","handleMouseUp","handleCurrTempChange","componentDidMount","componentWillUnmount","updateWindowDimensions","windowWidth","window","innerWidth","xknob","yknob","xcord","ycord","isMouseDown","initialState","start","addEventListener","stop","removeEventListener","send","pageX","pageY","distFromX","distFromY","targetTemperature","coords","rad","atan2","adjRad","floor","calculateTargetTemp","knobCoords","mouseCoords","getKnobCoords","mode","width","height","overflow","onMouseMove","onMouseUp","fill","cx","cy","r","fillOpacity","onMouseDown","style","cursor","x","y","text-anchor","fontSize","WidgetView","marginTop","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2c40de01.chunk.js","sourcesContent":["// Available variables:\n// - Machine\n// - interpret\n// - assign\n// - send\n// - sendParent\n// - spawn\n// - raise\n// - actions\n// - XState (all XState exports)\nimport { Machine, assign } from \"xstate\";\n\nconst updateCurrentTemp = assign({\n  currTemp: (context, event) => event.currTemp\n});\n\nconst updateTargetTemp = assign({\n  targetTemp: (context, event) => event.targetTemp,\n});\n\nconst colourGrey = assign({\n  colour: (context, event) => \"#E5E7EB\",\n});\n\nconst colourBlue = assign({\n  colour: (context, event) => \"#BFDBFE\",\n});\n\nconst colourRed = assign({\n  colour: (context, event) => \"#FECACA\",\n});\n\nconst thermostatMachine = Machine(\n  {\n    id: \"thermostat\",\n    initial: \"off\",\n    context: {\n      targetTemp: 72,\n      currTemp: 72,\n      dT: 2,\n      dTCool: 1.5,\n      dTHeat: 1.5,\n      colour: \"#E5E7EB\",\n    },\n    states: {\n      off: {\n        on: {\n          CURR_TEMP_CHANGE: {\n            target: \"tempCheck\",\n            actions: [updateCurrentTemp],\n          },\n          TARGET_TEMP_CHANGE: {\n            target: \"tempCheck\",\n            actions: [updateTargetTemp],\n          },\n        },\n      },\n      cooling: {\n        on: {\n          CURR_TEMP_CHANGE: {\n            target: \"tempCheck\",\n            actions: [updateCurrentTemp],\n          },\n          TARGET_TEMP_CHANGE: {\n            target: \"tempCheck\",\n            actions: [updateTargetTemp],\n          },\n        },\n      },\n      heating: {\n        on: {\n          CURR_TEMP_CHANGE: {\n            target: \"tempCheck\",\n            actions: [updateCurrentTemp],\n          },\n          TARGET_TEMP_CHANGE: {\n            target: \"tempCheck\",\n            actions: [updateTargetTemp],\n          },\n        },\n      },\n      // transient state\n      tempCheck: {\n        on: {\n          \"\": [\n            { target: \"off\", cond: \"isNormal\", actions: [colourGrey] },\n            { target: \"cooling\", cond: \"isHot\", actions: [colourBlue] },\n            { target: \"heating\", cond: \"isCold\", actions: [colourRed] },\n          ],\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      isHot: (context, event) => {\n        return (\n          context.currTemp > context.targetTemp + context.dT + context.dTCool\n        );\n      },\n      isCold: (context, event) => {\n        return (\n          context.currTemp < context.targetTemp - context.dT - context.dTHeat\n        );\n      },\n      isNormal: (context, event) => {\n        return (\n          context.currTemp < context.targetTemp + context.dT + context.dTCool &&\n          context.currTemp > context.targetTemp - context.dT - context.dTHeat\n        );\n      },\n    },\n  }\n);\n\nexport default thermostatMachine;","import React from \"react\";\nimport Input from \"@material-ui/core/Input\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\n\nclass Thermometer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClickAway = this.handleClickAway.bind(this);\n    this.state = { error: false };\n  }\n\n  handleChange(e) {\n    this.props.onTemperatureChange(e.target.value);\n  }\n\n  handleClickAway(e) {\n    if (this.props.currTemperature >= 32 && this.props.currTemperature <= 100) {\n      this.setState({ error: false });\n    } else {\n      console.log(this.props.currTemperature);\n      this.setState({ error: true });\n    }\n  }\n\n  render() {\n    const currTemperature = this.props.currTemperature;\n    const error = this.state.error;\n    return (\n      <ClickAwayListener onClickAway={this.handleClickAway}>\n        <FormControl>\n          <Input\n            error={error}\n            type=\"number\"\n            id=\"current-temperature-input\"\n            value={currTemperature}\n            onChange={this.handleChange}\n            endAdornment={<InputAdornment position=\"end\">°F</InputAdornment>}\n            aria-describedby=\"current-temperature-input-helper-text\"\n            inputProps={{\n              \"aria-label\": \"currTemp\",\n            }}\n          />\n          <FormHelperText id=\"current-temperature-input-helper-text\">\n            {error ? 'Only between 32°F to 100°F' : 'Current Temperature'}\n          </FormHelperText>\n        </FormControl>\n      </ClickAwayListener>\n    );\n  }\n}\n\nexport default Thermometer;\n","import React from \"react\";\nimport { Machine, interpret } from \"xstate\";\n\nimport { calculateTargetTemp } from '../Model/RadialSlider.Model'\nimport thermostatMachine from \"../ThermostatMachine\";\nimport Thermometer from \"../Thermometer\";\n\nfunction degToRad(deg) {\n  /**\n   * Helper function to convert degree to radians\n   */\n  return (deg * Math.PI) / 180;\n}\n\nfunction getKnobCoords(mouseCoords) {\n  /**\n   * Calculates where the knob should be based on mouse coordinates\n   */\n  const rad = Math.atan2(mouseCoords[1], mouseCoords[0]);\n  return [200 - Math.cos(rad) * 200, 200 - Math.sin(rad) * 200];\n}\n\nconst xknobStart = 200 - Math.cos(degToRad(174)) * 200;\nconst yknobStart = 200 - Math.sin(degToRad(174)) * 200;\n\nclass RadialSliderView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleMouseMove = this.handleMouseMove.bind(this);\n    this.handleMouseDown = this.handleMouseDown.bind(this);\n    this.handleMouseUp = this.handleMouseUp.bind(this);\n    this.handleCurrTempChange = this.handleCurrTempChange.bind(this);\n    this.componentDidMount = this.componentDidMount.bind(this);\n    this.componentWillUnmount = this.componentWillUnmount.bind(this);\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n    this.state = {\n      windowWidth: window.innerWidth,\n      xknob: xknobStart,\n      yknob: yknobStart,\n      xcord: 0,\n      ycord: 0,\n      isMouseDown: false,\n      current: thermostatMachine.initialState,\n    };\n  }\n\n  service = interpret(thermostatMachine).onTransition((current) =>\n    this.setState({ current })\n  );\n\n  componentDidMount() {\n    this.service.start();\n    this.updateWindowDimensions();\n    window.addEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  componentWillUnmount() {\n    this.service.stop();\n    window.removeEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions() {\n    /**\n     * Recalculate coordinates of horizontal centre of circle when window is resized\n     */\n    this.setState({\n      windowWidth: window.innerWidth,\n    });\n  }\n\n  handleCurrTempChange(currTemperature) {\n    this.service.send({\n      type: \"CURR_TEMP_CHANGE\",\n      currTemp: currTemperature,\n    });\n  }\n\n  handleMouseMove(e) {\n    this.setState({ xcord: e.pageX, ycord: e.pageY });\n    if (this.state.isMouseDown) {\n      const centreX = this.state.windowWidth / 2; // circle is in horizontal centre of page\n      const centreY = 250; // 50px margin and 200px radius\n      const distFromX = centreX - this.state.xcord;\n      const distFromY = centreY - this.state.ycord;\n      const targetTemperature = calculateTargetTemp([distFromX, distFromY]);\n      const knobCoords = getKnobCoords([distFromX, distFromY]);\n      this.setState({ xknob: knobCoords[0], yknob: knobCoords[1] });\n      this.service.send({\n        type: \"TARGET_TEMP_CHANGE\",\n        targetTemp: targetTemperature,\n      });\n    }\n  }\n\n  handleMouseDown(e) {\n    this.setState({ isMouseDown: true });\n  }\n\n  handleMouseUp(e) {\n    this.setState({ isMouseDown: false });\n  }\n\n  render() {\n    const currTemperature = this.state.current.context.currTemp;\n    const targetTemperature = this.state.current.context.targetTemp;\n    const mode = this.state.current.value;\n    const colour = this.state.current.context.colour;\n    const xknob = this.state.xknob;\n    const yknob = this.state.yknob;\n    return (\n      <div>\n        <svg width=\"400px\" height=\"400px\" overflow=\"visible\">\n          <circle\n            id=\"slider-body\"\n            onMouseMove={this.handleMouseMove}\n            onMouseUp={this.handleMouseUp}\n            fill={colour}\n            cx=\"200\"\n            cy=\"200\"\n            r=\"200\"\n          />\n          <circle\n            id=\"knob-shadow\"\n            fill=\"#9CA3AF\"\n            cx={xknob}\n            cy={yknob}\n            r=\"16\"\n            fillOpacity=\"0.2\"\n          />\n          <circle\n            id=\"knob\"\n            fill=\"#F9FAFB\"\n            cx={xknob}\n            cy={yknob}\n            r=\"10\"\n            onMouseDown={this.handleMouseDown}\n            onMouseUp={this.handleMouseUp}\n            style={{ cursor: \"pointer\" }}\n          />\n          <text x=\"200\" y=\"200\" text-anchor=\"middle\" fontSize=\"3rem\">\n            {targetTemperature}°F\n          </text>\n          <text x=\"200\" y=\"250\" text-anchor=\"middle\" fontSize=\"1rem\">\n            Current: {currTemperature}°F\n          </text>\n        </svg>\n        <p>Mode: {mode}</p>\n\n        <Thermometer\n          currTemperature={currTemperature}\n          onTemperatureChange={this.handleCurrTempChange}\n        />\n        \n      </div>\n    );\n  }\n}\n\nexport default RadialSliderView;\n","// TODO: Clean up conditional statement\nexport function calculateTargetTemp(coords) {\n  /**\n   * Determines the target temperature depending on the mouse coordinates\n   */\n  const distFromX = coords[0];\n  const distFromY = coords[1];\n  const rad = Math.atan2(distFromY, distFromX);\n  let adjRad = 0;\n  if (rad <= 180 && rad > -Math.PI / 2) {\n    adjRad = rad + Math.PI / 2;\n  } else if (rad >= 0 && rad < Math.PI / 2) {\n    adjRad = rad + Math.PI / 2;\n  } else if (rad >= Math.PI / 2 && rad <= Math.PI) {\n    adjRad = rad + Math.PI / 2;\n  } else {\n    adjRad = rad + 2.5 * Math.PI;\n  }\n  const targetTemperature = Math.floor(adjRad / (Math.PI / 15) + 50); // mathpi / 15 = 1 fahrenheit\n  return targetTemperature;\n}\n","import React from \"react\";\nimport RadialSliderView from './RadialSliderView';\n\nclass WidgetView extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div style={{marginTop: 50 }}>\n        <RadialSliderView />\n      </div>\n    );\n  }\n}\n\nexport default WidgetView;\n","import './App.css';\nimport WidgetView from \"./View/WidgetView.jsx\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <WidgetView />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}