{"version":3,"sources":["Model/RadialSliderModel.js","ThermostatMachine.jsx","Thermometer.jsx","View/RadialSliderView.jsx","View/WidgetView.jsx","App.js","reportWebVitals.js","index.js"],"names":["multiple","getAngle","windowWidth","mouseX","mouseY","distFromX","distFromY","Math","atan2","PI","degToRad","deg","updateCurrentTemp","assign","currTemp","context","event","updateTargetTemp","targetTemp","thermostatMachine","Machine","id","initial","dT","dTCool","dTHeat","colour","states","off","on","CURR_TEMP_CHANGE","target","actions","TARGET_TEMP_CHANGE","cooling","heating","tempCheck","cond","guards","isHot","isCold","isNormal","Thermometer","props","handleChange","bind","handleClickAway","state","error","e","this","onTemperatureChange","value","currTemperature","setState","ClickAwayListener","onClickAway","FormControl","Input","type","onChange","endAdornment","InputAdornment","position","aria-describedby","inputProps","FormHelperText","React","Component","xknobStart","cos","yknobStart","sin","RadialSliderView","service","interpret","onTransition","current","handleMouseMove","handleMouseDown","handleMouseUp","handleCurrTempChange","updateTarget","rotationDrag","componentDidMount","componentWillUnmount","updateWindowDimensions","window","innerWidth","xknob","yknob","isMouseDown","initialState","start","addEventListener","stop","removeEventListener","send","detail","knobCoords","rad","getKnobCoords","newTargetTemp","normalisedDeg","normaliseDeg","floor","calculateTargetTemp","CustomEvent","dispatchEvent","pageX","pageY","targetTemperature","mode","getColour","width","height","overflow","onMouseMove","onMouseUp","fill","cx","cy","r","fillOpacity","onMouseDown","style","cursor","x","y","text-anchor","fontSize","WidgetView","marginTop","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4a6684ee.chunk.js","sourcesContent":["export const multiple = 270 / 31; // angle range of each fahrenheit\n\nexport function calculateTargetTemp(deg) {\n  /**\n   * Determines the target temperature depending on the angle\n   */\n  const normalisedDeg = normaliseDeg(deg)\n  const targetTemperature = Math.floor(normalisedDeg / multiple) + 50;\n  return targetTemperature;\n}\n\nexport function getAngle(windowWidth, mouseX, mouseY) {\n  /**\n   * Get angle of rotation\n   */\n  const centreX = windowWidth / 2; // circle is in horizontal centre of page\n  const centreY = 250; // 50px margin and 200px radius\n  const distFromX = centreX - mouseX;\n  const distFromY = centreY - mouseY;\n  const deg = radToDeg(Math.atan2(distFromY, distFromX));\n  return deg;\n}\n\nexport function degToRad(deg) {\n  /**\n   * Helper function to convert degree to radians\n   */\n  return (deg * Math.PI) / 180;\n}\n\nexport function radToDeg(rad) {\n  /**\n   * Helper function to convert radians to degree\n   */\n  return (rad * 180) / Math.PI;\n}\n\nfunction normaliseDeg(deg) {\n  /**\n   * Adjusts the angle to relative axis starting at -45deg\n   */\n  if (deg >= -45 && deg <= 180) {\n    return deg + 45;\n  } else {\n    return deg + 405;\n  }\n}\n","// Available variables:\n// - Machine\n// - interpret\n// - assign\n// - send\n// - sendParent\n// - spawn\n// - raise\n// - actions\n// - XState (all XState exports)\nimport { Machine, assign } from \"xstate\";\n\nconst updateCurrentTemp = assign({\n  currTemp: (context, event) => event.currTemp\n});\n\nconst updateTargetTemp = assign({\n  targetTemp: (context, event) => event.targetTemp,\n});\n\nconst thermostatMachine = Machine(\n  {\n    id: \"thermostat\",\n    initial: \"off\",\n    context: {\n      targetTemp: 72,\n      currTemp: 72,\n      dT: 2,\n      dTCool: 1.5,\n      dTHeat: 1.5,\n      colour: \"#E5E7EB\",\n    },\n    states: {\n      off: {\n        on: {\n          CURR_TEMP_CHANGE: {\n            target: \"tempCheck\",\n            actions: [updateCurrentTemp],\n          },\n          TARGET_TEMP_CHANGE: {\n            target: \"tempCheck\",\n            actions: [updateTargetTemp],\n          },\n        },\n      },\n      cooling: {\n        on: {\n          CURR_TEMP_CHANGE: {\n            target: \"tempCheck\",\n            actions: [updateCurrentTemp],\n          },\n          TARGET_TEMP_CHANGE: {\n            target: \"tempCheck\",\n            actions: [updateTargetTemp],\n          },\n        },\n      },\n      heating: {\n        on: {\n          CURR_TEMP_CHANGE: {\n            target: \"tempCheck\",\n            actions: [updateCurrentTemp],\n          },\n          TARGET_TEMP_CHANGE: {\n            target: \"tempCheck\",\n            actions: [updateTargetTemp],\n          },\n        },\n      },\n      // transient state\n      tempCheck: {\n        on: {\n          \"\": [\n            { target: \"off\", cond: \"isNormal\" },\n            { target: \"cooling\", cond: \"isHot\" },\n            { target: \"heating\", cond: \"isCold\" },\n          ],\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      isHot: (context, event) => {\n        return (\n          context.currTemp > context.targetTemp + context.dT + context.dTCool\n        );\n      },\n      isCold: (context, event) => {\n        return (\n          context.currTemp < context.targetTemp - context.dT - context.dTHeat\n        );\n      },\n      isNormal: (context, event) => {\n        return (\n          context.currTemp < context.targetTemp + context.dT + context.dTCool &&\n          context.currTemp > context.targetTemp - context.dT - context.dTHeat\n        );\n      },\n    },\n  }\n);\n\nexport default thermostatMachine;","import React from \"react\";\nimport Input from \"@material-ui/core/Input\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\n\nclass Thermometer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClickAway = this.handleClickAway.bind(this);\n    this.state = { error: false };\n  }\n\n  handleChange(e) {\n    this.props.onTemperatureChange(e.target.value);\n  }\n\n  handleClickAway(e) {\n    if (this.props.currTemperature >= 32 && this.props.currTemperature <= 100) {\n      this.setState({ error: false });\n    } else {\n      this.setState({ error: true });\n    }\n  }\n\n  render() {\n    const currTemperature = this.props.currTemperature;\n    const error = this.state.error;\n    return (\n      <ClickAwayListener onClickAway={this.handleClickAway}>\n        <FormControl>\n          <Input\n            error={error}\n            type=\"number\"\n            id=\"current-temperature-input\"\n            value={currTemperature}\n            onChange={this.handleChange}\n            endAdornment={<InputAdornment position=\"end\">°F</InputAdornment>}\n            aria-describedby=\"current-temperature-input-helper-text\"\n            inputProps={{\n              \"aria-label\": \"currTemp\",\n            }}\n          />\n          <FormHelperText id=\"current-temperature-input-helper-text\">\n            {error ? 'Only between 32°F to 100°F' : 'Current Temperature'}\n          </FormHelperText>\n        </FormControl>\n      </ClickAwayListener>\n    );\n  }\n}\n\nexport default Thermometer;\n","import React from \"react\";\nimport { Machine, interpret } from \"xstate\";\n\nimport { calculateTargetTemp, getAngle, degToRad, multiple } from '../Model/RadialSliderModel'\nimport thermostatMachine from \"../ThermostatMachine\";\nimport Thermometer from \"../Thermometer\";\n\n/**\n * Radial Slider View-Model Component\n */\nfunction getKnobCoords(deg) {\n  /**\n   * Calculates where the knob should be based on angle\n   */\n  const rad = degToRad(deg);\n  return [200 - Math.cos(rad) * 200, 200 - Math.sin(rad) * 200];\n}\n\nfunction getColour(mode) {\n  /**\n   * Determines colour of radial slider depending on mode\n   */\n  switch (mode) {\n    case \"off\":\n      return \"#E5E7EB\";\n    case \"cooling\":\n      return \"#BFDBFE\";\n    case \"heating\":\n      return \"#FECACA\";\n    default:\n      throw \"Unkown mode\"\n  }\n}\n\nconst xknobStart = 200 - Math.cos(degToRad((72 - 50) * multiple - 45)) * 200;\nconst yknobStart = 200 - Math.sin(degToRad((72 - 50) * multiple - 45)) * 200;\n\nclass RadialSliderView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleMouseMove = this.handleMouseMove.bind(this);\n    this.handleMouseDown = this.handleMouseDown.bind(this);\n    this.handleMouseUp = this.handleMouseUp.bind(this);\n    this.handleCurrTempChange = this.handleCurrTempChange.bind(this);\n    this.updateTarget = this.updateTarget.bind(this);\n    this.rotationDrag = this.rotationDrag.bind(this);\n    this.componentDidMount = this.componentDidMount.bind(this);\n    this.componentWillUnmount = this.componentWillUnmount.bind(this);\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n    this.state = {\n      windowWidth: window.innerWidth,\n      xknob: xknobStart,\n      yknob: yknobStart,\n      isMouseDown: false,\n      current: thermostatMachine.initialState,\n    };\n  }\n\n  service = interpret(thermostatMachine).onTransition((current) =>\n    this.setState({ current })\n  );\n\n  componentDidMount() {\n    this.service.start();\n    this.updateWindowDimensions();\n    window.addEventListener(\"updateTarget\", this.updateTarget);\n    window.addEventListener(\"rotationDrag\", this.rotationDrag);\n    window.addEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  componentWillUnmount() {\n    this.service.stop();\n    window.removeEventListener(\"updateTarget\", this.updateTarget);\n    window.removeEventListener(\"rotationDrag\", this.rotationDrag);\n    window.removeEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions() {\n    /**\n     * Recalculate coordinates of horizontal centre of circle when window is resized\n     */\n    this.setState({\n      windowWidth: window.innerWidth,\n    });\n  }\n\n  updateTarget(e) {\n    /**\n     * Update target temperature in state machine\n     */\n    this.service.send({\n      type: \"TARGET_TEMP_CHANGE\",\n      targetTemp: e.detail.targetTemp,\n    });\n  }\n\n  handleCurrTempChange(currTemperature) {\n    /**\n     * Update current temperature in state machine\n     */\n    this.service.send({\n      type: \"CURR_TEMP_CHANGE\",\n      currTemp: currTemperature,\n    });\n  }\n\n  rotationDrag(e) {\n    const deg = getAngle(\n      this.state.windowWidth,\n      e.detail.mouseX,\n      e.detail.mouseY\n    );\n    if (deg >= -45 || deg <= -135) { // if angle is in valid zone\n      const knobCoords = getKnobCoords(deg);\n      this.setState({ xknob: knobCoords[0], yknob: knobCoords[1] });\n\n      const newTargetTemp = calculateTargetTemp(deg);\n      if (newTargetTemp !== this.state.current.context.targetTemp) {\n        var updateTarget = new CustomEvent(\"updateTarget\", {\n          detail: {\n            targetTemp: newTargetTemp,\n          },\n        });\n        window.dispatchEvent(updateTarget);\n      }\n    }\n  }\n\n  handleMouseMove(e) {\n    if (this.state.isMouseDown) {\n      var rotationDrag = new CustomEvent(\"rotationDrag\", {\n        detail: {\n          mouseX: e.pageX,\n          mouseY: e.pageY,\n        }\n      });\n      window.dispatchEvent(rotationDrag);\n    }\n  }\n\n  handleMouseDown(e) {\n    this.setState({ isMouseDown: true });\n  }\n\n  handleMouseUp(e) {\n    this.setState({ isMouseDown: false });\n  }\n\n  render() {\n    /**\n     * Values taken from XState Context\n     */\n    const currTemperature = this.state.current.context.currTemp;\n    const targetTemperature = this.state.current.context.targetTemp;\n    const mode = this.state.current.value;\n    const colour = getColour(mode);\n\n    /**\n     * Values taken from React State\n     */\n    const xknob = this.state.xknob;\n    const yknob = this.state.yknob;\n\n    /**\n     * Radial Slider View Component\n     */\n    return (\n      <div>\n        <svg width=\"400px\" height=\"400px\" overflow=\"visible\">\n          <circle\n            id=\"slider-body\"\n            onMouseMove={this.handleMouseMove}\n            onMouseUp={this.handleMouseUp}\n            fill={colour}\n            cx=\"200\"\n            cy=\"200\"\n            r=\"200\"\n          />\n          <circle\n            id=\"knob-shadow\"\n            fill=\"#9CA3AF\"\n            cx={xknob}\n            cy={yknob}\n            r=\"16\"\n            fillOpacity=\"0.2\"\n          />\n          <circle\n            id=\"knob\"\n            fill=\"#F9FAFB\"\n            cx={xknob}\n            cy={yknob}\n            r=\"10\"\n            onMouseDown={this.handleMouseDown}\n            onMouseUp={this.handleMouseUp}\n            style={{ cursor: \"pointer\" }}\n          />\n          <text x=\"200\" y=\"200\" text-anchor=\"middle\" fontSize=\"3rem\">\n            {targetTemperature}°F\n          </text>\n          <text x=\"200\" y=\"250\" text-anchor=\"middle\" fontSize=\"1rem\">\n            Current: {currTemperature}°F\n          </text>\n        </svg>\n        <p>Mode: {mode}</p>\n\n        {/* External UI (for testing) */}\n        <Thermometer\n          currTemperature={currTemperature}\n          onTemperatureChange={this.handleCurrTempChange}\n        />\n      </div>\n    );\n  }\n}\n\nexport default RadialSliderView;\n","import React from \"react\";\nimport RadialSliderView from './RadialSliderView';\n\nclass WidgetView extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div style={{marginTop: 50 }}>\n        <RadialSliderView />\n      </div>\n    );\n  }\n}\n\nexport default WidgetView;\n","import './App.css';\nimport WidgetView from \"./View/WidgetView.jsx\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <WidgetView />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}